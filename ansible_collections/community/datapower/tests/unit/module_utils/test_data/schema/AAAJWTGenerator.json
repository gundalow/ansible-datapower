{
    "schema": {
        "types": [
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmAdminState"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmAdminState"
                    }
                },
                "type": {
                    "cli-arg": "enabled | disabled",
                    "name": "dmAdminState",
                    "value-list": {
                        "value": [
                            {
                                "name": "enabled",
                                "display": "enabled"
                            },
                            {
                                "name": "disabled",
                                "display": "disabled"
                            }
                        ]
                    }
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmString"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmString"
                    }
                },
                "type": {
                    "cli-arg": "string",
                    "name": "dmString"
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmUInt32"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmUInt32"
                    }
                },
                "type": {
                    "cli-arg": "number",
                    "minimum": 0,
                    "name": "dmUInt32",
                    "maximum": "0xFFFFFFFF"
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmJWTClaims"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmJWTClaims"
                    }
                },
                "type": {
                    "name": "dmJWTClaims",
                    "value-list": {
                        "value": [
                            {
                                "display": "Audience",
                                "description": "Specify an audience, \"aud\", claim.",
                                "name": "aud",
                                "summary": "Add an audience claim."
                            },
                            {
                                "display": "Not before",
                                "description": "Specify a not before, \"nbf\", claim.",
                                "name": "nbf",
                                "summary": "Add a not before claim."
                            },
                            {
                                "display": "Issued at",
                                "description": "Specify an issued at, \"iat\", claim.",
                                "name": "iat",
                                "summary": "Add an issued at claim."
                            },
                            {
                                "display": "JWT ID",
                                "description": "Specify a JWT ID, \"jti\" claim.",
                                "name": "jti",
                                "summary": "Add a JWT ID claim."
                            },
                            {
                                "display": "Nonce",
                                "description": "Specify a \"nonce\" claim.",
                                "name": "nonce",
                                "summary": "Add a nonce claim."
                            },
                            {
                                "display": "Custom",
                                "description": "Specify one or more custom claims.",
                                "name": "custom",
                                "summary": "Add the custom claim."
                            }
                        ]
                    }
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmUInt16"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmUInt16"
                    }
                },
                "type": {
                    "cli-arg": "number",
                    "minimum": 0,
                    "name": "dmUInt16",
                    "maximum": "0xFFFF"
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmFSFile"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmFSFile"
                    }
                },
                "type": {
                    "cli-arg": "file",
                    "name": "dmFSFile"
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmJWTGenMethod"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmJWTGenMethod"
                    }
                },
                "type": {
                    "name": "dmJWTGenMethod",
                    "value-list": {
                        "value": [
                            {
                                "display": "Sign",
                                "description": "Specify how to sign the JWT.",
                                "name": "sign",
                                "summary": "Sign the JWT"
                            },
                            {
                                "display": "Encrypt",
                                "description": "Specify how to encrypt the JWT.",
                                "name": "encrypt",
                                "summary": "Encrypt the JWT"
                            }
                        ]
                    }
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmJWSSignAlgorithm"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmJWSSignAlgorithm"
                    }
                },
                "type": {
                    "value-list": {
                        "value": [
                            {
                                "display": "HS256",
                                "description": "HMAC using SHA-256",
                                "name": "HS256",
                                "summary": "HMAC using SHA-256"
                            },
                            {
                                "display": "HS384",
                                "description": "HMAC using SHA-384",
                                "name": "HS384",
                                "summary": "HMAC using SHA-384"
                            },
                            {
                                "display": "HS512",
                                "description": "HMAC using SHA-512",
                                "name": "HS512",
                                "summary": "HMAC using SHA-512"
                            },
                            {
                                "display": "RS256",
                                "description": "RSASSA-PKCS-v1_5 using SHA-256",
                                "name": "RS256",
                                "summary": "RSASSA-PKCS-v1_5 using SHA-256"
                            },
                            {
                                "display": "RS384",
                                "description": "RSASSA-PKCS-v1_5 using SHA 384",
                                "name": "RS384",
                                "summary": "RSASSA-PKCS-v1_5 using SHA 384"
                            },
                            {
                                "display": "RS512",
                                "description": "RSASSA-PKCS-v1_5 using SHA-512",
                                "name": "RS512",
                                "summary": "RSASSA-PKCS-v1_5 using SHA-512"
                            },
                            {
                                "display": "ES256",
                                "description": "ECDSA using P-256 and SHA-256",
                                "name": "ES256",
                                "summary": "ECDSA using P-256 and SHA-256"
                            },
                            {
                                "display": "ES384",
                                "description": "ECDSA using P-384 and SHA-384",
                                "name": "ES384",
                                "summary": "ECDSA using P-384 and SHA-384"
                            },
                            {
                                "display": "ES512",
                                "description": "ECDSA using P-521 and SHA-512",
                                "name": "ES512",
                                "summary": "ECDSA using P-521 and SHA-512"
                            },
                            {
                                "display": "PS256",
                                "description": "RSASSA-PSS using SHA-256 and MGF1 with SHA-256",
                                "name": "PS256",
                                "summary": "RSASSA-PSS using SHA-256 and MGF1 with SHA-256"
                            },
                            {
                                "display": "PS384",
                                "description": "RSASSA-PSS using SHA-384 and MGF1 with SHA-384",
                                "name": "PS384",
                                "summary": "RSASSA-PSS using SHA-384 and MGF1 with SHA-384"
                            },
                            {
                                "display": "PS512",
                                "description": "RSASSA-PSS using SHA-512 and MGF1 with SHA-512",
                                "name": "PS512",
                                "summary": "RSASSA-PSS using SHA-512 and MGF1 with SHA-512"
                            }
                        ]
                    },
                    "display": "JSON Web Signature algorithm",
                    "description": "The signature method for JSON Web Signature.",
                    "name": "dmJWSSignAlgorithm",
                    "summary": "JSON Web Signature algorithm"
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmReference"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmReference"
                    }
                },
                "type": {
                    "cli-arg": "object",
                    "name": "dmReference"
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmJWEEncAlgorithm"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmJWEEncAlgorithm"
                    }
                },
                "type": {
                    "value-list": {
                        "value": [
                            {
                                "display": "A128CBC-HS256",
                                "description": "AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm",
                                "name": "A128CBC-HS256",
                                "summary": "AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm"
                            },
                            {
                                "display": "A192CBC-HS384",
                                "description": "AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm",
                                "name": "A192CBC-HS384",
                                "summary": "AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm"
                            },
                            {
                                "display": "A256CBC-HS512",
                                "description": "AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm",
                                "name": "A256CBC-HS512",
                                "summary": "AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm"
                            },
                            {
                                "display": "A128GCM",
                                "description": "AES GCM using 128-bit key",
                                "name": "A128GCM",
                                "summary": "AES GCM using 128-bit key"
                            },
                            {
                                "display": "A192GCM",
                                "description": "AES GCM using 192-bit key",
                                "name": "A192GCM",
                                "summary": "AES GCM using 192-bit key"
                            },
                            {
                                "display": "A256GCM",
                                "description": "AES GCM using 256-bit key",
                                "name": "A256GCM",
                                "summary": "AES GCM using 256-bit key"
                            }
                        ]
                    },
                    "display": "JSON Web Encrypt cryptographic algorithm",
                    "description": "Cryptographic algorithm for JSON Web Encrypt.",
                    "name": "dmJWEEncAlgorithm",
                    "summary": "JSON Web Encrypt cryptographic algorithm"
                }
            },
            {
                "_links": {
                    "doc": {
                        "href": "/mgmt/docs/types/dmJWEKeyAlgorithm"
                    },
                    "self": {
                        "href": "/mgmt/types/default/dmJWEKeyAlgorithm"
                    }
                },
                "type": {
                    "value-list": {
                        "value": [
                            {
                                "display": "RSA1_5",
                                "description": "RSAES-PKCS1-V1_5",
                                "name": "RSA1_5",
                                "summary": "RSAES-PKCS1-V1_5"
                            },
                            {
                                "display": "RSA-OAEP",
                                "description": "RSAES OAEP using default parameters",
                                "name": "RSA-OAEP",
                                "summary": "RSAES OAEP using default parameters"
                            },
                            {
                                "display": "RSA-OAEP-256",
                                "description": "RSAES OAEP using SHA-256 and MGF1 with SHA-256",
                                "name": "RSA-OAEP-256",
                                "summary": "RSAES OAEP using SHA-256 and MGF1 with SHA-256"
                            },
                            {
                                "display": "A128KW",
                                "description": "AES Key Wrap with default initial value using 128 bit key",
                                "name": "A128KW",
                                "summary": "AES Key Wrap with default initial value using 128 bit key"
                            },
                            {
                                "display": "A192KW",
                                "description": "AES Key Wrap with default initial value using 192 bit key",
                                "name": "A192KW",
                                "summary": "AES Key Wrap with default initial value using 192 bit key"
                            },
                            {
                                "display": "A256KW",
                                "description": "AES Key Wrap with default initial value using 256 bit key",
                                "name": "A256KW",
                                "summary": "AES Key Wrap with default initial value using 256 bit key"
                            },
                            {
                                "display": "dir",
                                "description": "Direct use of a shared symmetric key as the CEK",
                                "name": "dir",
                                "summary": "Direct use of a shared symmetric key as the CEK"
                            }
                        ]
                    },
                    "display": "JSON Web Encrypt algorithm for key management",
                    "description": "The key management algorithm for JSON Web Encrypt.",
                    "name": "dmJWEKeyAlgorithm",
                    "summary": "JSON Web Encrypt algorithm for key management"
                }
            }
        ],
        "metadata": {
            "object": {
                "licensed-feature": "IDG",
                "name": "AAAJWTGenerator",
                "display": "JWT Generator",
                "property-group": [
                    {
                        "property-group": [
                            {
                                "member": [
                                    {
                                        "name": "mAdminState"
                                    },
                                    {
                                        "name": "UserSummary"
                                    },
                                    {
                                        "name": "Issuer"
                                    },
                                    {
                                        "name": "Duration"
                                    },
                                    {
                                        "name": "GenMethod"
                                    }
                                ],
                                "name": "general",
                                "display": ""
                            },
                            {
                                "member": [
                                    {
                                        "name": "SignAlgorithm"
                                    },
                                    {
                                        "name": "SignKey"
                                    },
                                    {
                                        "name": "SignSSKey"
                                    }
                                ],
                                "name": "signgroup",
                                "display": "Sign the token"
                            },
                            {
                                "member": [
                                    {
                                        "name": "EncAlgorithm"
                                    },
                                    {
                                        "name": "EncryptAlgorithm"
                                    },
                                    {
                                        "name": "EncryptCertificate"
                                    },
                                    {
                                        "name": "EncryptSSKey"
                                    }
                                ],
                                "name": "encgroup",
                                "display": "Encrypt the token"
                            }
                        ],
                        "name": "main",
                        "display": "Main"
                    },
                    {
                        "member": [
                            {
                                "name": "AdditionalClaims"
                            },
                            {
                                "name": "Audience"
                            },
                            {
                                "name": "NotBefore"
                            },
                            {
                                "name": "CustomClaims"
                            }
                        ],
                        "name": "misc",
                        "display": "Advanced"
                    }
                ],
                "uri": "crypto/jwt-generator",
                "summary": "Specify JWT content and cryptographic methods to generate a JWT in the AAA postprocessing phase.",
                "cmd-group": "crypto",
                "cli-alias": "jwt-generator",
                "properties": {
                    "property": [
                        {
                            "name": "mAdminState",
                            "default": "enabled",
                            "type": {
                                "href": "/mgmt/types/default/dmAdminState"
                            },
                            "label": "Enable administrative state",
                            "summary": "Set the administrative state of this configuration.",
                            "cli-alias": "admin-state",
                            "display": "Administrative state",
                            "hoverhelp": "&lt;p>Set the administrative state of the configuration.&lt;/p>&lt;ul>&lt;li>To make active, set the check box.&lt;/li>&lt;li>To make inactive, clear the check box.&lt;/li>&lt;/ul>",
                            "description": "&lt;p>The administrative state of the configuration.&lt;/p>&lt;ul>&lt;li>To make active, set to enabled.&lt;/li>&lt;li>To make inactive, set to disabled.&lt;/li>&lt;/ul>"
                        },
                        {
                            "description": "A descriptive summary for the JWT Generator configuration.",
                            "type": {
                                "href": "/mgmt/types/default/dmString"
                            },
                            "summary": "Enter a brief descriptive summary for the JWT Generator configuration.",
                            "cli-alias": "summary",
                            "display": "Comments",
                            "name": "UserSummary"
                        },
                        {
                            "name": "Issuer",
                            "default": "idg",
                            "cli-alias": "iss",
                            "required": "true",
                            "summary": "Specify the value for the issuer claim.",
                            "maximum-length": 256,
                            "type": {
                                "href": "/mgmt/types/default/dmString"
                            },
                            "display": "Issuer",
                            "description": "The issuer claim, \"iss\", identifies the principal that issues the JWT. The maximum length is 256 characters. The default value is &lt;tt>idg&lt;/tt> ."
                        },
                        {
                            "name": "Duration",
                            "default": 3600,
                            "cli-alias": "duration",
                            "required": "true",
                            "maximum": 31622400,
                            "summary": "Specify the validity period for calculating the expiration time, \"exp\" claim, of the JWT processing.",
                            "minimum": 1,
                            "units": "seconds",
                            "type": {
                                "href": "/mgmt/types/default/dmUInt32"
                            },
                            "display": "Validity period",
                            "description": "The validity period identifies the expiration time, \"exp\" claim. Enter a value in the range 1 - 31622400. The default value is 3600."
                        },
                        {
                            "description": "&lt;p>Additional JWT claims, such as audience \"aud\" claim, not before \"nbf\" claim, issued at \"iat\" claim, JWT ID \"jit\" claim, \"nonce\" claim, and custom claim, can be added for JWT.&lt;/p>&lt;p>The subject, \"sub\" claim is added by default. You can override the subject claim value by specifying the \"sub\" claim in the Custom claims field.&lt;/p>",
                            "type": {
                                "href": "/mgmt/types/default/dmJWTClaims"
                            },
                            "summary": "Add additional JWT claims.",
                            "cli-alias": "add-claims",
                            "display": "Additional claims",
                            "name": "AdditionalClaims"
                        },
                        {
                            "name": "Audience",
                            "required-when": {
                                "condition": {
                                    "property-name": "AdditionalClaims",
                                    "evaluation": "property-value-in-list",
                                    "value": "aud"
                                }
                            },
                            "summary": "Specify the value for the audience claim.",
                            "cli-alias": "aud",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "maximum-length": 256,
                            "array": "true",
                            "type": {
                                "href": "/mgmt/types/default/dmString"
                            },
                            "display": "Audience claim",
                            "description": "The audience, \"aud\", claim identifies the recipients that the JWT is intended for. The maximum length of the Audience claim is 256 characters."
                        },
                        {
                            "name": "NotBefore",
                            "default": 0,
                            "required-when": {
                                "condition": {
                                    "property-name": "AdditionalClaims",
                                    "evaluation": "property-value-in-list",
                                    "value": "nbf"
                                }
                            },
                            "maximum": 480,
                            "summary": "Specify a delta used to calculate the not before claim.",
                            "cli-alias": "nbf",
                            "minimum": 0,
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "units": "seconds",
                            "type": {
                                "href": "/mgmt/types/default/dmUInt16"
                            },
                            "display": "Delta for not before claim",
                            "description": "The not before claim, \"nbf\", indicates the time before which the JWT must not be accepted for processing. Enter a value in the range 0 - 480. The default value is 0."
                        },
                        {
                            "name": "CustomClaims",
                            "required-when": {
                                "condition": {
                                    "property-name": "AdditionalClaims",
                                    "evaluation": "property-value-in-list",
                                    "value": "custom"
                                }
                            },
                            "locations": {
                                "location": [
                                    "local",
                                    "store"
                                ]
                            },
                            "summary": "Specify custom claims.",
                            "cli-alias": "custom-claims",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "type": {
                                "href": "/mgmt/types/default/dmFSFile"
                            },
                            "display": "Custom claims",
                            "description": "The GatewayScript or XSLT file is processed to specify the custom claim. The GatewayScript or XSLT file must be stored in the &lt;tt>local:&lt;/tt> or &lt;tt>store:&lt;/tt> directory."
                        },
                        {
                            "description": "The signing and encryption methods can be used to secure and generate a JWT.",
                            "type": {
                                "href": "/mgmt/types/default/dmJWTGenMethod"
                            },
                            "summary": "Specify how to secure and generate a JWT, by using signing and encryption methods.",
                            "cli-alias": "generate-method",
                            "display": "JWT generation method",
                            "name": "GenMethod"
                        },
                        {
                            "name": "SignAlgorithm",
                            "default": "RS256",
                            "required-when": {
                                "condition": {
                                    "property-name": "GenMethod",
                                    "evaluation": "property-value-in-list",
                                    "value": "sign"
                                }
                            },
                            "summary": "Specify a signing algorithm to generate the JWT signature.",
                            "cli-alias": "sign-alg",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "type": {
                                "href": "/mgmt/types/default/dmJWSSignAlgorithm"
                            },
                            "display": "Signing algorithm",
                            "description": "Various signing algorithms can be used to generate the JWT signature, such as HS256, HS384, HS512, RS256, RS384, and RS512. The default value is RS256."
                        },
                        {
                            "name": "SignKey",
                            "required-when": {
                                "condition": {
                                    "evaluation": "logical-and",
                                    "condition": [
                                        {
                                            "property-name": "GenMethod",
                                            "evaluation": "property-value-in-list",
                                            "value": "sign"
                                        },
                                        {
                                            "property-name": "SignAlgorithm",
                                            "evaluation": "property-value-in-list",
                                            "value": [
                                                "RS256",
                                                "RS384",
                                                "RS512",
                                                "PS256",
                                                "PS384",
                                                "PS512",
                                                "ES256",
                                                "ES384",
                                                "ES512"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "summary": "Specify a key alias to sign the JWT.",
                            "cli-alias": "sign-key",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "type": {
                                "href": "/mgmt/types/default/dmReference",
                                "reference-to": {
                                    "href": "/mgmt/metadata/default/CryptoKey"
                                }
                            },
                            "display": "Signing key",
                            "description": "The key alias can be used to sign the JWT. You can get a key alias by configuring the Crypto Key."
                        },
                        {
                            "name": "SignSSKey",
                            "required-when": {
                                "condition": {
                                    "evaluation": "logical-and",
                                    "condition": [
                                        {
                                            "property-name": "GenMethod",
                                            "evaluation": "property-value-in-list",
                                            "value": "sign"
                                        },
                                        {
                                            "property-name": "SignAlgorithm",
                                            "evaluation": "property-value-in-list",
                                            "value": [
                                                "HS256",
                                                "HS384",
                                                "HS512"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "summary": "Specify a shared secret key alias to sign the JWT.",
                            "cli-alias": "sign-sskey",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "type": {
                                "href": "/mgmt/types/default/dmReference",
                                "reference-to": {
                                    "href": "/mgmt/metadata/default/CryptoSSKey"
                                }
                            },
                            "display": "Signing shared secret",
                            "description": "The shared secret key alias can be used to sign the JWT. You can get the shared secret key alias by configuring the Crypto Shared Secret Key."
                        },
                        {
                            "name": "EncAlgorithm",
                            "default": "A128CBC-HS256",
                            "required-when": {
                                "condition": {
                                    "property-name": "GenMethod",
                                    "evaluation": "property-value-in-list",
                                    "value": "encrypt"
                                }
                            },
                            "summary": "Specify the encryption algorithms to encrypt the JWT.",
                            "cli-alias": "enc",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "type": {
                                "href": "/mgmt/types/default/dmJWEEncAlgorithm"
                            },
                            "display": "Encryption algorithm",
                            "description": "Various encryption algorithms can be used to encrypt the JWT, such as A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, and A256GCM. The default value is A128CBC-HS256."
                        },
                        {
                            "name": "EncryptAlgorithm",
                            "default": "RSA1_5",
                            "required-when": {
                                "condition": {
                                    "property-name": "GenMethod",
                                    "evaluation": "property-value-in-list",
                                    "value": "encrypt"
                                }
                            },
                            "summary": "Specify a key management algorithm to encrypt the JWT.",
                            "cli-alias": "enc-alg",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "type": {
                                "href": "/mgmt/types/default/dmJWEKeyAlgorithm"
                            },
                            "display": "Key management algorithm",
                            "description": "Various key management algorithms can be used to encrypt the JWT, such as RSA1_5, RSA-OAEP, RSA-OAEP-256, A128KW, A192KW, A256KW, and dir. The default value is RSA1_5."
                        },
                        {
                            "name": "EncryptCertificate",
                            "required-when": {
                                "condition": {
                                    "evaluation": "logical-and",
                                    "condition": [
                                        {
                                            "property-name": "GenMethod",
                                            "evaluation": "property-value-in-list",
                                            "value": "encrypt"
                                        },
                                        {
                                            "property-name": "EncryptAlgorithm",
                                            "evaluation": "property-value-in-list",
                                            "value": [
                                                "RSA1_5",
                                                "RSA-OAEP",
                                                "RSA-OAEP-256"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "summary": "Specify a certificate alias to encrypt the JWT.",
                            "cli-alias": "enc-cert",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "type": {
                                "href": "/mgmt/types/default/dmReference",
                                "reference-to": {
                                    "href": "/mgmt/metadata/default/CryptoCertificate"
                                }
                            },
                            "display": "Encryption certificate",
                            "description": "The certificate alias can be used to encrypt the JWT. You can get the certificate alias by configuring the Crypto Certificate."
                        },
                        {
                            "name": "EncryptSSKey",
                            "required-when": {
                                "condition": {
                                    "evaluation": "logical-and",
                                    "condition": [
                                        {
                                            "property-name": "GenMethod",
                                            "evaluation": "property-value-in-list",
                                            "value": "encrypt"
                                        },
                                        {
                                            "property-name": "EncryptAlgorithm",
                                            "evaluation": "property-value-in-list",
                                            "value": [
                                                "A128KW",
                                                "A192KW",
                                                "A256KW",
                                                "dir"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "summary": "Specify a shared secret key alias to encrypt the JWT.",
                            "cli-alias": "enc-sskey",
                            "ignored-when": {
                                "condition": {
                                    "evaluation": "logical-true"
                                }
                            },
                            "type": {
                                "href": "/mgmt/types/default/dmReference",
                                "reference-to": {
                                    "href": "/mgmt/metadata/default/CryptoSSKey"
                                }
                            },
                            "display": "Encryption key",
                            "description": "The shared secret key alias can be used to encrypt the JWT. You can get the shared secret key alias by configuring the Crypto Shared Secret Key."
                        }
                    ]
                },
                "description": "&lt;p>The JSON Web Token (JWT) Generator specifies the JWT content and the cryptographic methods, such as signing and encryption methods, used for generating a JWT during the AAA postprocessing phase.&lt;/p>"
            },
            "_links": {
                "doc": {
                    "href": "/mgmt/docs/metadata/AAAJWTGenerator"
                },
                "self": {
                    "href": "/mgmt/metadata/default/AAAJWTGenerator"
                }
            }
        }
    }
}